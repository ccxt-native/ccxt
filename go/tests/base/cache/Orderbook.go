package cache

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// --------------------------------------------------------------------------------------------------------------------

func TestWsOrderBook()  {
    var orderBookInput interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10}, []interface{}{9.1, 11}, []interface{}{8.2, 12}, []interface{}{7.3, 13}, []interface{}{6.4, 14}, []interface{}{4.5, 13}, []interface{}{4.5, 0}},
        "asks": []interface{}{[]interface{}{16.6, 10}, []interface{}{15.5, 11}, []interface{}{14.4, 12}, []interface{}{13.3, 13}, []interface{}{12.2, 14}, []interface{}{11.1, 13}},
        "timestamp": 1574827239000,
        "nonce": 69,
        "symbol": nil,
    }
    var orderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10}, []interface{}{9.1, 11}, []interface{}{8.2, 12}, []interface{}{7.3, 13}, []interface{}{6.4, 14}},
        "asks": []interface{}{[]interface{}{11.1, 13}, []interface{}{12.2, 14}, []interface{}{13.3, 13}, []interface{}{14.4, 12}, []interface{}{15.5, 11}, []interface{}{16.6, 10}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var storeBid interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10}, []interface{}{9.1, 11}, []interface{}{8.2, 12}, []interface{}{7.3, 13}, []interface{}{6.4, 14}, []interface{}{3, 4}},
        "asks": []interface{}{[]interface{}{11.1, 13}, []interface{}{12.2, 14}, []interface{}{13.3, 13}, []interface{}{14.4, 12}, []interface{}{15.5, 11}, []interface{}{16.6, 10}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var limitedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10}, []interface{}{9.1, 11}, []interface{}{8.2, 12}, []interface{}{7.3, 13}, []interface{}{6.4, 14}},
        "asks": []interface{}{[]interface{}{11.1, 13}, []interface{}{12.2, 14}, []interface{}{13.3, 13}, []interface{}{14.4, 12}, []interface{}{15.5, 11}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var limitedDeletedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10}, []interface{}{9.1, 11}, []interface{}{8.2, 12}, []interface{}{7.3, 13}, []interface{}{6.4, 14}},
        "asks": []interface{}{[]interface{}{11.1, 13}, []interface{}{12.2, 14}, []interface{}{13.3, 13}, []interface{}{14.4, 12}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var indexedOrderBookInput interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, "1234"}, []interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}, []interface{}{4.5, 13, "1239"}},
        "asks": []interface{}{[]interface{}{16.6, 10, "1240"}, []interface{}{15.5, 11, "1241"}, []interface{}{14.4, 12, "1242"}, []interface{}{13.3, 13, "1243"}, []interface{}{12.2, 14, "1244"}, []interface{}{11.1, 13, "1244"}},
        "timestamp": 1574827239000,
        "nonce": 69,
        "symbol": nil,
    }
    var indexedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, "1234"}, []interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}, []interface{}{4.5, 13, "1239"}},
        "asks": []interface{}{[]interface{}{11.1, 13, "1244"}, []interface{}{13.3, 13, "1243"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var limitedIndexedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, "1234"}, []interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}},
        "asks": []interface{}{[]interface{}{11.1, 13, "1244"}, []interface{}{13.3, 13, "1243"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var incrementalIndexedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, "1234"}, []interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}, []interface{}{4.5, 13, "1239"}},
        "asks": []interface{}{[]interface{}{11.1, 27, "1244"}, []interface{}{13.3, 13, "1243"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var incrementalIndexedOrderBookDeletedTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}, []interface{}{4.5, 13, "1239"}},
        "asks": []interface{}{[]interface{}{11.1, 27, "1244"}, []interface{}{13.3, 13, "1243"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var limitedIncrementalIndexedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, "1234"}, []interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}},
        "asks": []interface{}{[]interface{}{11.1, 27, "1244"}, []interface{}{13.3, 13, "1243"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var storedIncrementalIndexedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 13, "1234"}, []interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}, []interface{}{4.5, 13, "1239"}},
        "asks": []interface{}{[]interface{}{11.1, 27, "1244"}, []interface{}{13.3, 13, "1243"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var anotherStoredIncrementalIndexedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10.2, 13, "1234"}, []interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}, []interface{}{4.5, 13, "1239"}},
        "asks": []interface{}{[]interface{}{11.1, 27, "1244"}, []interface{}{13.3, 13, "1243"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var overwrite1234 interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{9.1, 11, "1235"}, []interface{}{9, 3, "1231"}, []interface{}{9, 1, "1232"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}, []interface{}{4.5, 13, "1239"}, []interface{}{4, 2, "12399"}},
        "asks": []interface{}{[]interface{}{11.1, 13, "1244"}, []interface{}{13.3, 13, "1243"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var overwrite1244 interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, "1234"}, []interface{}{9.1, 11, "1235"}, []interface{}{8.2, 12, "1236"}, []interface{}{7.3, 13, "1237"}, []interface{}{6.4, 14, "1238"}, []interface{}{4.5, 13, "1239"}},
        "asks": []interface{}{[]interface{}{13.3, 13, "1243"}, []interface{}{13.5, 13, "1244"}, []interface{}{14.4, 12, "1242"}, []interface{}{15.5, 11, "1241"}, []interface{}{16.6, 10, "1240"}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var countedOrderBookInput interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, 1}, []interface{}{9.1, 11, 1}, []interface{}{8.2, 12, 1}, []interface{}{7.3, 13, 1}, []interface{}{7.3, 0, 1}, []interface{}{6.4, 14, 5}, []interface{}{4.5, 13, 5}, []interface{}{4.5, 13, 1}, []interface{}{4.5, 13, 0}},
        "asks": []interface{}{[]interface{}{16.6, 10, 1}, []interface{}{15.5, 11, 1}, []interface{}{14.4, 12, 1}, []interface{}{13.3, 13, 3}, []interface{}{12.2, 14, 3}, []interface{}{11.1, 13, 3}, []interface{}{11.1, 13, 12}},
        "timestamp": 1574827239000,
        "nonce": 69,
        "symbol": nil,
    }
    var countedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, 1}, []interface{}{9.1, 11, 1}, []interface{}{8.2, 12, 1}, []interface{}{6.4, 14, 5}},
        "asks": []interface{}{[]interface{}{11.1, 13, 12}, []interface{}{12.2, 14, 3}, []interface{}{13.3, 13, 3}, []interface{}{14.4, 12, 1}, []interface{}{15.5, 11, 1}, []interface{}{16.6, 10, 1}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var storedCountedOrderbookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, 1}, []interface{}{9.1, 11, 1}, []interface{}{8.2, 12, 1}, []interface{}{6.4, 14, 5}, []interface{}{1, 1, 6}},
        "asks": []interface{}{[]interface{}{11.1, 13, 12}, []interface{}{12.2, 14, 3}, []interface{}{13.3, 13, 3}, []interface{}{14.4, 12, 1}, []interface{}{15.5, 11, 1}, []interface{}{16.6, 10, 1}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var limitedCountedOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 10, 1}, []interface{}{9.1, 11, 1}, []interface{}{8.2, 12, 1}, []interface{}{6.4, 14, 5}},
        "asks": []interface{}{[]interface{}{11.1, 13, 12}, []interface{}{12.2, 14, 3}, []interface{}{13.3, 13, 3}, []interface{}{14.4, 12, 1}, []interface{}{15.5, 11, 1}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var incrementalOrderBookInput interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 1}, []interface{}{10, 2}, []interface{}{9.1, 0}, []interface{}{8.2, 1}, []interface{}{7.3, 1}, []interface{}{6.4, 1}},
        "asks": []interface{}{[]interface{}{11.1, 5}, []interface{}{11.1, OpNeg(6)}, []interface{}{11.1, 2}, []interface{}{12.2, 10}, []interface{}{12.2, OpNeg(9.875)}, []interface{}{12.2, 0}, []interface{}{13.3, 3}, []interface{}{14.4, 4}, []interface{}{15.5, 1}, []interface{}{16.6, 3}},
        "timestamp": 1574827239000,
        "nonce": 69,
        "symbol": nil,
    }
    var incremetalOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 3}, []interface{}{8.2, 1}, []interface{}{7.3, 1}, []interface{}{6.4, 1}},
        "asks": []interface{}{[]interface{}{11.1, 2}, []interface{}{12.2, 0.125}, []interface{}{13.3, 3}, []interface{}{14.4, 4}, []interface{}{15.5, 1}, []interface{}{16.6, 3}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var limitedIncremetalOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 3}, []interface{}{8.2, 1}, []interface{}{7.3, 1}, []interface{}{6.4, 1}},
        "asks": []interface{}{[]interface{}{11.1, 2}, []interface{}{12.2, 0.125}, []interface{}{13.3, 3}, []interface{}{14.4, 4}, []interface{}{15.5, 1}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var storedIncremetalOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 3}, []interface{}{8.2, 1}, []interface{}{7.3, 1}, []interface{}{6.4, 1}, []interface{}{3, 3}},
        "asks": []interface{}{[]interface{}{11.1, 2}, []interface{}{12.2, 0.125}, []interface{}{13.3, 3}, []interface{}{14.4, 4}, []interface{}{15.5, 1}, []interface{}{16.6, 3}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var doubleStoredIncremetalOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 3}, []interface{}{8.2, 1}, []interface{}{7.3, 1}, []interface{}{6.4, 1}, []interface{}{3, 10}},
        "asks": []interface{}{[]interface{}{11.1, 2}, []interface{}{12.2, 0.125}, []interface{}{13.3, 3}, []interface{}{14.4, 4}, []interface{}{15.5, 1}, []interface{}{16.6, 3}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    var negativeStoredIncremetalOrderBookTarget interface{} = map[string]interface{} {
        "bids": []interface{}{[]interface{}{10, 3}, []interface{}{8.2, 1}, []interface{}{7.3, 1}, []interface{}{6.4, 1}},
        "asks": []interface{}{[]interface{}{11.1, 2}, []interface{}{12.2, 0.125}, []interface{}{13.3, 3}, []interface{}{14.4, 4}, []interface{}{16.6, 3}},
        "timestamp": 1574827239000,
        "datetime": "2019-11-27T04:00:39.000Z",
        "nonce": 69,
        "symbol": nil,
    }
    
// --------------------------------------------------------------------------------------------------------------------

    orderBook := NewOrderBook(orderBookInput)
    limited := NewOrderBook(orderBookInput, 5)
    orderBook.Limit()
    Assert(Equals(orderBook, orderBookTarget))
    limited.Limit()
    Assert(Equals(limited, limitedOrderBookTarget))
    orderBook.Limit()
    Assert(Equals(orderBook, orderBookTarget))
    var bids interface{} = GetValue(orderBook, "bids")
    bids.Store(1000, 0)
    orderBook.Limit()
    Assert(Equals(orderBook, orderBookTarget))
    bids.Store(3, 4)
    orderBook.Limit()
    Assert(Equals(orderBook, storeBid))
    bids.Store(3, 0)
    orderBook.Limit()
    Assert(Equals(orderBook, orderBookTarget))
    var asks interface{} = GetValue(limited, "asks")
    asks.Store(15.5, 0)
    limited.Limit()
    Assert(Equals(limited, limitedDeletedOrderBookTarget))
    
// --------------------------------------------------------------------------------------------------------------------

    indexedOrderBook := NewIndexedOrderBook(indexedOrderBookInput)
    limitedIndexedOrderBook := NewIndexedOrderBook(indexedOrderBookInput, 5)
    indexedOrderBook.Limit()
    Assert(Equals(indexedOrderBook, indexedOrderBookTarget))
    limitedIndexedOrderBook.Limit()
    Assert(Equals(limitedIndexedOrderBook, limitedIndexedOrderBookTarget))
    indexedOrderBook.Limit()
    Assert(Equals(indexedOrderBook, indexedOrderBookTarget))
    var indexedBids interface{} = GetValue(indexedOrderBook, "bids")
    indexedBids.StoreArray([]interface{}{1000, 0, "12345"})
    Assert(Equals(indexedOrderBook, indexedOrderBookTarget))
    indexedBids.StoreArray([]interface{}{10, 0, "1234"})
    indexedBids.StoreArray([]interface{}{10, 2, "1231"})
    indexedBids.StoreArray([]interface{}{10, 1, "1232"})
    indexedBids.StoreArray([]interface{}{4, 2, "12399"})
    indexedBids.StoreArray([]interface{}{9, 2, "1231"})
    indexedBids.StoreArray([]interface{}{9, 3, "1231"})
    indexedBids.StoreArray([]interface{}{9, 1, "1232"})
    indexedOrderBook.Limit()
    Assert(Equals(indexedOrderBook, overwrite1234))
    indexedOrderBook = NewIndexedOrderBook(indexedOrderBookInput)
    var indexedAsks interface{} = GetValue(indexedOrderBook, "asks")
    indexedAsks.StoreArray([]interface{}{13.5, 13, "1244"})
    indexedOrderBook.Limit()
    Assert(Equals(indexedOrderBook, overwrite1244))
    
// --------------------------------------------------------------------------------------------------------------------

    countedOrderBook := NewCountedOrderBook(countedOrderBookInput)
    limitedCountedOrderBook := NewCountedOrderBook(countedOrderBookInput, 5)
    countedOrderBook.Limit()
    Assert(Equals(countedOrderBook, countedOrderBookTarget))
    limitedCountedOrderBook.Limit()
    Assert(Equals(limitedCountedOrderBook, limitedCountedOrderBookTarget))
    countedOrderBook.Limit()
    Assert(Equals(countedOrderBook, countedOrderBookTarget))
    var countedBids interface{} = GetValue(countedOrderBook, "bids")
    countedBids.StoreArray([]interface{}{5, 0, 6})
    countedOrderBook.Limit()
    Assert(Equals(countedOrderBook, countedOrderBookTarget))
    countedBids.StoreArray([]interface{}{1, 1, 6})
    countedOrderBook.Limit()
    Assert(Equals(countedOrderBook, storedCountedOrderbookTarget))
    
// --------------------------------------------------------------------------------------------------------------------

    // let incrementalOrderBook = new IncrementalOrderBook (incrementalOrderBookInput);
    // const limitedIncrementalOrderBook = new IncrementalOrderBook (incrementalOrderBookInput, 5);
    // incrementalOrderBook.limit ();
    // Assert (equals (incrementalOrderBook, incremetalOrderBookTarget));
    // incrementalOrderBook.limit (5);
    // limitedIncrementalOrderBook.limit ();
    // Assert (equals (incrementalOrderBook, limitedIncremetalOrderBookTarget));
    // Assert (equals (limitedIncrementalOrderBook, limitedIncremetalOrderBookTarget));
    // incrementalOrderBook.limit ();
    // Assert (equals (incrementalOrderBook, incremetalOrderBookTarget));
    // bids = incrementalOrderBook['bids'];
    // bids.store (3, 3);
    // incrementalOrderBook.limit ();
    // Assert (equals (incrementalOrderBook, storedIncremetalOrderBookTarget));
    // bids.store (3, 7);
    // incrementalOrderBook.limit ();
    // Assert (equals (incrementalOrderBook, doubleStoredIncremetalOrderBookTarget));
    // bids.store (17, 0);
    // Assert (equals (incrementalOrderBook, doubleStoredIncremetalOrderBookTarget));
    // incrementalOrderBook = new IncrementalOrderBook (incrementalOrderBookInput);
    // asks = incrementalOrderBook['asks'];
    // asks.store (15.5, -10);
    // incrementalOrderBook.limit ();
    // Assert (equals (incrementalOrderBook, negativeStoredIncremetalOrderBookTarget));
    
// --------------------------------------------------------------------------------------------------------------------

    // let incrementalIndexedOrderBook = new IncrementalIndexedOrderBook (indexedOrderBookInput);
    // const limitedIncrementalIndexedOrderBook = new IncrementalIndexedOrderBook (indexedOrderBookInput, 5);
    // incrementalIndexedOrderBook.limit ();
    // Assert (equals (incrementalIndexedOrderBook, incrementalIndexedOrderBookTarget));
    // incrementalIndexedOrderBook.limit (5);
    // limitedIncrementalIndexedOrderBook.limit ();
    // Assert (equals (incrementalIndexedOrderBook, limitedIncrementalIndexedOrderBookTarget));
    // Assert (equals (limitedIncrementalIndexedOrderBook, limitedIncrementalIndexedOrderBookTarget));
    // incrementalIndexedOrderBook.limit ();
    // Assert (equals (incrementalIndexedOrderBook, incrementalIndexedOrderBookTarget));
    // bids = incrementalIndexedOrderBook['bids'];
    // bids.store (5, 0, 'xxyy');
    // incrementalIndexedOrderBook.limit ();
    // Assert (equals (incrementalIndexedOrderBook, incrementalIndexedOrderBookTarget));
    // bids.store (10.0, 3, '1234');  // price does match merge size
    // incrementalIndexedOrderBook.limit ();
    // Assert (equals (incrementalIndexedOrderBook, storedIncrementalIndexedOrderBookTarget));
    // bids.store (0, 0, '1234');
    // incrementalIndexedOrderBook.limit ();
    // Assert (equals (incrementalIndexedOrderBook, incrementalIndexedOrderBookDeletedTarget));
    // incrementalIndexedOrderBook = new IncrementalIndexedOrderBook (indexedOrderBookInput);
    // bids = incrementalIndexedOrderBook['bids'];
    // bids.store (10.2, 3, '1234');  // price does not match merge size
    // incrementalIndexedOrderBook.limit ();
    // Assert (equals (incrementalIndexedOrderBook, anotherStoredIncrementalIndexedOrderBookTarget));
    
// --------------------------------------------------------------------------------------------------------------------

    resetBook := NewOrderBook(storeBid)
    resetBook.Limit()
    resetBook.Reset(orderBookInput)
    resetBook.Limit()
    Assert(Equals(resetBook, orderBookTarget))
}